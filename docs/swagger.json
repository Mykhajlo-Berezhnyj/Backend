{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "A RESTful API for managing a user's recipe list, including creation, adding to favorites, and deletion of recipes. The API also supports filtering by categories and ingredients."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000"
    },
    {
      "url": "https://tasteorama-backend-dcjy.onrender.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Recipes",
      "description": "Recipes operations (getAll, getById, post)"
    },
    {
      "name": "FavoriteRecipes",
      "description": "FavoriteRecipes operations (getAll, postByID, deleteByID)"
    },
    {
      "name": "MyRecipes",
      "description": "MyRecipes operations (getAll)"
    },
    {
      "name": "Auth",
      "description": "Authentication operations (register, login, refresh)."
    },
    {
      "name": "Users",
      "description": "Users operations (get)"
    },
    {
      "name": "Сategories",
      "description": "Сategories operations (getAll)"
    },
    {
      "name": "Ingredients",
      "description": "Ingredients operations (getAll)"
    }
  ],
  "paths": {
    "/api/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Search recipes",
        "operationId": "searchRecipes",
        "description": "Get a list of recipes with pagination and search filters: category, ingredient, or keyword in the title.",
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by category (MongoDB ObjectId)",
            "example": "64c8d958249fae54bae90bb9"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by ingredient (MongoDB ObjectId)",
            "example": "6462a8f74c3d0ddd28897fcd"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search recipes by keyword in title",
            "example": "cake"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipes retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Recipe"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 35
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 4
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get detail info recipe",
        "description": "Retrieve detailed information about a specific recipe by its ID.",
        "operationId": "getRecipeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the recipe to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipe with id {id}!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipe with id 6462a8f74c3d0ddd28897fce!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provide a valid ID",
            "$ref": "#/components/responses/400"
          },
          "404": {
            "description": "Recipe not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": null
    },
    "/api/auth/login": {
      "post": null
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out the current user",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshUser",
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request reset password email",
        "operationId": "requestResetEmail",
        "requestBody": {
          "description": "User request reset email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "yeJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODg4ZDgwYzg2ZjZkNTExNDBlZDJlNTIiLCJlbWFpbCI6ImJtdmUyMUB1a3IubmV0IiwiaWF0IjoxNzUzODY1NzIwLCJleHAiOjE3NTM4NjYwMjB9.Xp60X675SgqtwhR9_QSQwNmNXdnathXTAXH0mlP5xpg5"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewPassw0rd!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User information",
        "description": "Retrieves current authenticated user's profile details.",
        "operationId": "UserInformation",
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetching user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Current user info"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "name",
                        "avatar",
                        "email",
                        "favoriteRecipes",
                        "followers",
                        "following"
                      ],
                      "properties": {
                        "_id": {
                          "description": "User's id",
                          "type": "string",
                          "example": "688319f519bc98717111a6b5"
                        },
                        "name": {
                          "description": "User's name",
                          "type": "string",
                          "example": "John Doe"
                        },
                        "avatar": {
                          "description": "User's avatar URL",
                          "type": "string",
                          "format": "uri",
                          "example": "https://example.com/avatar.jpg"
                        },
                        "email": {
                          "description": "User's email",
                          "type": "string",
                          "example": "john@example.com"
                        },
                        "favoriteRecipes": {
                          "description": "User's favorites recipes",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "followers": {
                          "description": "User's followers",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "following": {
                          "description": "User's following",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Retrieve a list of all ingredients",
        "description": "Returns an array of ingredient objects including their name, description, and image URL.",
        "operationId": "IngredientsInformation",
        "responses": {
          "200": {
            "description": "Ingredients list successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ingredientsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request – invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Сategories"
        ],
        "summary": "Retrieve a list of all сategory",
        "operationId": "categoriesInformation",
        "description": "Returns an array of сategory objects including their id and name.",
        "responses": {
          "200": {
            "description": "Сategories list successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request – invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/api/recipes/favorite/{recipeId}": {
      "post": {
        "tags": [
          "FavoriteRecipes"
        ],
        "summary": "Add recipe to favorite",
        "operationId": "addRecipeFavorite",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the recipe to add to favorites"
          }
        ],
        "responses": {
          "201": {
            "description": "Recipe added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Recipe"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "Recipe": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "ingredients",
          "instructions",
          "description",
          "thumb",
          "time",
          "area"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's id",
            "type": "string",
            "example": "6462a8f74c3d0ddd28897fcd"
          },
          "title": {
            "description": "Recipe's title",
            "type": "string",
            "example": "Battenberg Cake"
          },
          "category": {
            "description": "Category of the recipe (populated object)",
            "type": "object",
            "required": [
              "_id",
              "name"
            ],
            "properties": {
              "_id": {
                "type": "string",
                "example": "6462a6cd4c3d0ddd28897f8f"
              },
              "name": {
                "type": "string",
                "example": "Dessert"
              }
            }
          },
          "description": {
            "description": "Short description of the recipe",
            "type": "string",
            "example": "A classic British cake made with almond sponge cake and covered with marzipan. It is traditionally pink and yellow checkered in appearance."
          },
          "thumb": {
            "description": "URL of the recipe's thumbnail image",
            "type": "string",
            "example": "https://ftp.goit.study/img/so-yummy/preview/Battenberg%20Cake.jpg"
          },
          "time": {
            "description": "Preparation time in minutes",
            "type": "string",
            "example": "60"
          },
          "ingredients": {
            "description": "List of ingredients with measures",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "_id",
                "id",
                "measure"
              ],
              "properties": {
                "_id": {
                  "description": "Id of the ingredient record in the recipe",
                  "type": "string",
                  "example": "68a88b0a2746ddbe5d48bea3"
                },
                "id": {
                  "description": "Ingredient object (populated)",
                  "type": "object",
                  "required": [
                    "_id",
                    "name"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "68a7492da667396e2ff2a512"
                    },
                    "name": {
                      "type": "string",
                      "example": "Butter"
                    }
                  }
                },
                "measure": {
                  "description": "Amount or measure of the ingredient",
                  "type": "string",
                  "example": "175g"
                }
              }
            }
          },
          "instructions": {
            "description": "Step-by-step cooking instructions",
            "type": "string",
            "example": "Heat oven to 180C/160C fan/gas 4 and line the base..."
          },
          "area": {
            "description": "Region or origin of the recipe",
            "type": "string",
            "example": "British"
          },
          "owner": {
            "description": "Id of the user who created the recipe",
            "type": "string",
            "example": "64c8d958249fae54bae90bb9"
          },
          "createdAt": {
            "description": "Date when the recipe was created",
            "type": "string",
            "format": "date-time",
            "example": "2023-03-11T10:25:33Z"
          },
          "updatedAt": {
            "description": "Date when the recipe was last updated",
            "type": "string",
            "format": "date-time",
            "example": "2024-03-03T12:34:31Z"
          }
        }
      },
      "ingredient": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          },
          "desc": {
            "type": "string",
            "example": "A type of cephalopod with a soft, cylindrical body and long tentacles..."
          },
          "img": {
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e37aa.png"
          }
        }
      },
      "ingredientsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found ingredients!"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ingredient"
            }
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          }
        }
      },
      "categoryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found category!"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/category"
            }
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request — the server could not process the request due to a client error.  Possible reasons include:\n  - \"Empty data\"\n  - \"Validation failed\" — one or more fields are invalid or missing. \n  - \"Malformed request\" — the request format is incorrect.\n  - \"Invalid ID format\" — must be a valid ObjectId.\n\nNot all of these errors apply to every endpoint. The actual reason depends on the specific request. For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Malformed request body"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "validationFailedRecipes": {
                "summary": "All possible validation errors recipes",
                "description": "This example shows all possible validation errors for the recipes request. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "title is required. - title must not exceed 64 characters.",
                      "description is required. - description must not exceed 200 characters.",
                      "time is required. - time must be a number. - time must be greater than or equal to 1. - time must not exceed 360.",
                      "calories must be a number. - calories must be greater than or equal to 1. - calories must not exceed 10000.",
                      "category is required. - category must be a valid MongoDB ObjectId. - category must exist in the categories collection (valid category from API).",
                      "ingredients is required. - ingredients must be an array with 2-15 items. - each item must be an object with id, measure - id valid MongoDB ObjectId (valid ingredient from API), required - measure string, at least 1 character, required",
                      "instructions is required. - instructions must not exceed 1200 characters.",
                      "thumb must be an image file. - thumb must not exceed 2 MB."
                    ]
                  }
                }
              },
              "validationAuthOperations": {
                "summary": "All possible validation errors for auth",
                "description": "This example shows all possible validation errors for the user. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "Name should be required",
                      "Name should be a string",
                      "Name should have at least 3 characters",
                      "Name should have at most 16 characters",
                      "Email should be required",
                      "Email must be a valid email address",
                      "Password should be required",
                      "Password must contain at least one uppercase letter",
                      "Password must contain at least one lowercase letter",
                      "Password must contain at least one special character",
                      "Password must contain at least one number",
                      "Password must not contain spaces",
                      "Password should have at least 8 characters",
                      "Token is required"
                    ]
                  }
                }
              },
              "malformedRequest": {
                "summary": "Malformed from data",
                "description": "The submitted form data is malformed or corrupted. This can happen if the multipart/form-data is improperly encoded, or if files or fields are damaged during submission. Please check the form structure and file integrity before retrying.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Malformed request body",
                    "errors": [
                      "Expected double-quoted property name in JSON at position 22 (line 3 column 1)"
                    ]
                  }
                }
              },
              "validationParamsId": {
                "summary": "Validation error for id",
                "description": "This example shows validation error for the id.\n",
                "value": {
                  "status": 400,
                  "message": "Invalid id"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized — request lacks valid authentication\n The specific cause of the 401 error may vary depending on the endpoint.\n Possible reasons include:\n  - Missing or malformed Authorization header\n  - Expired or invalid access token\n  - Session not found\n  - Session expired\n  - Token expired\n  - Token invalid\n  - User not found\nFor more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            },
            "examples": {
              "missingHeader": {
                "summary": "Missing Authorization header",
                "value": {
                  "status": 401,
                  "message": "Please provide Authorization header"
                }
              },
              "malformedToken": {
                "summary": "Malformed Authorization header",
                "value": {
                  "status": 401,
                  "message": "Authorization header should be of type Bearer"
                }
              },
              "sessionNotFound": {
                "summary": "Session not found",
                "value": {
                  "status": 401,
                  "message": "Session not found"
                }
              },
              "sessionExpired": {
                "summary": "Session expired",
                "value": {
                  "status": 401,
                  "message": "Session expired"
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 401,
                  "message": "User not found"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found — the requested resource could not be found. Possible reasons include:\n - \"Resource not found\" — the requested item does not exist.\n - \"User not found\" — no user was found for the given email or token.\n - \"Recipe not found\" — no Recipe was found for the given recipeId.\n\n Not all of these cases apply to every endpoint.\n For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not found"
                }
              }
            },
            "examples": {
              "resourceNotFound": {
                "summary": "Generic not found",
                "value": {
                  "status": 404,
                  "message": "Resource not found"
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 404,
                  "message": "User not found"
                }
              },
              "RecipeNotFound": {
                "summary": "Recipe not found",
                "value": {
                  "status": 404,
                  "message": "Recipe not found"
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error:\n  - \"Unhandled exception\" — a generic server error.\n  - \"Database failure\" — internal service or DB error.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "error"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "error": {
                  "type": "string",
                  "example": "Internal server error"
                }
              }
            },
            "examples": {
              "genericError": {
                "summary": "Unhandled exception",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Internal server error"
                }
              },
              "dbFailure": {
                "summary": "Database error",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Failed to connect to the database"
                }
              }
            }
          }
        }
      }
    }
  }
}