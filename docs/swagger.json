{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "A RESTful API for managing a user's recipe list, including creation, adding to favorites, and deletion of recipes. The API also supports filtering by categories and ingredients."
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000/api",
      "description": "Local development server"
    },
    {
      "url": "https://tasteorama-backend-dcjy.onrender.com/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication operations (register, login, refresh)."
    },
    {
      "name": "Recipes",
      "description": "Recipes operations (getAll, getById, post)"
    },
    {
      "name": "Users",
      "description": "Users operations (get)"
    },
    {
      "name": "Categories",
      "description": "Categories operations (getAll)"
    },
    {
      "name": "Ingredients",
      "description": "Ingredients operations (getAll)"
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "security": [],
        "requestBody": {
          "description": "User registration payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "name": "John Doe",
                "email": "john@example.com",
                "password": "SecureP@ssw0rd!"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Session cookies for authentication",
                "schema": {
                  "type": "string",
                  "example": "sessionId=abc123; refreshToken=def456; HttpOnly; Secure; SameSite=Strict"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "security": [],
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "john@example.com",
                "password": "SecureP@ssw0rd!"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "JWT access token",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Session cookies for authentication",
                "schema": {
                  "type": "string",
                  "example": "sessionId=abc123; refreshToken=def456; HttpOnly; Secure; SameSite=Strict"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "invalidCredentials": {
                    "summary": "Invalid email or password",
                    "value": {
                      "status": 401,
                      "message": "Invalid credentials"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out the current user",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshUser",
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request reset password email",
        "operationId": "requestResetEmail",
        "security": [],
        "requestBody": {
          "description": "User request reset email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "security": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "yeJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODg4ZDgwYzg2ZjZkNTExNDBlZDJlNTIiLCJlbWFpbCI6ImJtdmUyMUB1a3IubmV0IiwiaWF0IjoxNzUzODY1NzIwLCJleHAiOjE3NTM4NjYwMjB9.Xp60X675SgqtwhR9_QSQwNmNXdnathXTAXH0mlP5xpg5"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewPassw0rd!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User information",
        "description": "Retrieves current authenticated user's profile details.",
        "operationId": "UserInformation",
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "fetching user details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Current user info"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "_id",
                        "name",
                        "avatar",
                        "email",
                        "favoriteRecipes",
                        "followers",
                        "following"
                      ],
                      "properties": {
                        "_id": {
                          "description": "User's id",
                          "type": "string",
                          "example": "688319f519bc98717111a6b5"
                        },
                        "name": {
                          "description": "User's name",
                          "type": "string",
                          "example": "John Doe"
                        },
                        "avatar": {
                          "description": "User's avatar URL",
                          "type": "string",
                          "format": "uri",
                          "example": "https://example.com/avatar.jpg"
                        },
                        "email": {
                          "description": "User's email",
                          "type": "string",
                          "example": "john@example.com"
                        },
                        "favoriteRecipes": {
                          "description": "User's favorites recipes",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "followers": {
                          "description": "User's followers",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        },
                        "following": {
                          "description": "User's following",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": []
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Search recipes",
        "operationId": "searchRecipes",
        "description": "Get a list of recipes with pagination and search filters: category, ingredient, or keyword in the title.",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by category (MongoDB ObjectId)",
            "example": "64c8d958249fae54bae90bb9"
          },
          {
            "in": "query",
            "name": "ingredient",
            "schema": {
              "type": "string"
            },
            "description": "Filter recipes by ingredient (MongoDB ObjectId)",
            "example": "6462a8f74c3d0ddd28897fcd"
          },
          {
            "in": "query",
            "name": "search",
            "schema": {
              "type": "string"
            },
            "description": "Search recipes by keyword in title",
            "example": "cake"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            },
            "example": 1
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipes retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 35
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 4
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create new recipe",
        "operationId": "createOwnRecipe",
        "description": "Create a new owners recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "time",
                  "category",
                  "ingredients",
                  "instructions"
                ],
                "properties": {
                  "area": {
                    "description": "Which country's dish",
                    "type": "string",
                    "example": "6462a6f04c3d0ddd28897f9b"
                  },
                  "title": {
                    "description": "The name of the dish",
                    "type": "string",
                    "example": "Lasagne"
                  },
                  "description": {
                    "description": "Description dish",
                    "type": "string",
                    "example": "Layers of pasta, meat sauce, and cheese"
                  },
                  "time": {
                    "description": "Cooking time in minutes",
                    "type": "number",
                    "example": 10
                  },
                  "calories": {
                    "description": "Calories",
                    "type": "number",
                    "example": 230
                  },
                  "category": {
                    "description": "Category dish",
                    "type": "string",
                    "example": "6462a6cd4c3d0ddd28897f94"
                  },
                  "ingredients": {
                    "description": "Ingredients dish (JSON string array of objects)",
                    "type": "string",
                    "example": "[{\"id\":\"64d9f0d2e9f1b8a3d6e12345\",\"measure\":\"200 g\"}]"
                  },
                  "instructions": {
                    "description": "Instructions on how to prepare a dish",
                    "type": "string",
                    "example": "Heat the oil in a large saucepan"
                  },
                  "thumb": {
                    "description": "Dish's photo (max 2MB, only image)",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a recipe",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created new recire!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Recipe-2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get detail info recipe",
        "description": "Retrieve detailed information about a specific recipe by its ID.",
        "security": [],
        "operationId": "getRecipeById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the recipe to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipe with id {id}!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipe with id 6462a8f74c3d0ddd28897fce!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Recipe-2"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Provide a valid ID",
            "$ref": "#/components/responses/400"
          },
          "404": {
            "description": "Recipe not found",
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/my": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get own recipes",
        "operationId": "getOwnRecipes",
        "description": "Returns a paginated list of recipes created by the logged-in user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "Page number for pagination",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1,
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "description": "Number of items per page",
            "schema": {
              "type": "integer",
              "default": 12,
              "minimum": 1,
              "maximum": 100,
              "example": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Own recipes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnRecipesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/404"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/500"
                }
              }
            }
          }
        }
      }
    },
    "/recipes/favorites": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get favorite recipes",
        "operationId": "getFavoriteRecipes",
        "description": "Retrieve a list of the authenticated user’s favorite recipes with pagination.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            },
            "description": "Number of recipes per page"
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite recipes retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Favorite recipes retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Recipe-2"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 12
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 2
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/recipes/favorites/{recipeId}": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add recipe to favorite",
        "operationId": "addRecipeFavorite",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the recipe to add to favorites"
          }
        ],
        "responses": {
          "201": {
            "description": "Recipe added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Recipe-2"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe from favorite",
        "operationId": "deleteRecipeFavorite",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "recipeId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the recipe to delete from favorites"
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe delete from favorites"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Retrieve a list of all ingredients",
        "description": "Returns an array of ingredient objects including their name, description, and image URL.",
        "security": [],
        "operationId": "IngredientsInformation",
        "responses": {
          "200": {
            "description": "Ingredients list successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ingredientsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request – invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Сategories"
        ],
        "summary": "Retrieve a list of all сategory",
        "operationId": "categoriesInformation",
        "description": "Returns an array of сategory objects including their id and name.",
        "security": [],
        "responses": {
          "200": {
            "description": "Сategories list successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/categoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request – invalid parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT token in format: Bearer <token>"
      }
    },
    "schemas": {
      "400": {
        "type": "object",
        "title": "Bad Request Error",
        "description": "Bad request error response",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          },
          "data": {
            "type": "object",
            "required": [
              "message",
              "errors"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Validation failed"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "Email is required",
                  "Password must be at least 8 characters"
                ]
              }
            }
          }
        }
      },
      "401": {
        "type": "object",
        "title": "Unauthorized Error",
        "description": "Unauthorized error response",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "data": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "Session expired"
              }
            }
          }
        }
      },
      "404": {
        "type": "object",
        "title": "Not Found Error",
        "description": "Resource not found error response",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "500": {
        "type": "object",
        "title": "Internal Server Error",
        "description": "Internal server error response",
        "required": [
          "status",
          "message",
          "error"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Something went wrong"
          },
          "error": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "Error400": {
        "$ref": "#/components/schemas/400"
      },
      "Error401": {
        "$ref": "#/components/schemas/401"
      },
      "Error404": {
        "$ref": "#/components/schemas/404"
      },
      "Error500": {
        "$ref": "#/components/schemas/500"
      },
      "BadRequestResponse": {
        "type": "object",
        "title": "Bad Request Response",
        "description": "Generic bad request response",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          },
          "data": {
            "type": "object",
            "required": [
              "message",
              "errors"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Bad request"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "Invalid request format"
                ]
              }
            }
          }
        }
      },
      "Recipe": {
        "$ref": "#/components/schemas/recipe"
      },
      "User": {
        "type": "object",
        "title": "User",
        "description": "Information about a user account, including personal details and their favorite recipes",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Full name of the user",
            "minLength": 3,
            "maxLength": 16,
            "example": "Darrell Ryan"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address, used for login and notifications",
            "example": "audra.block42@gmail.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password (must contain uppercase, lowercase, number, and special character)",
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]",
            "example": "SecureP@ssw0rd!"
          }
        }
      },
      "Ingredient": {
        "$ref": "#/components/schemas/ingredient"
      },
      "IngredientsResponse": {
        "$ref": "#/components/schemas/ingredientsResponse"
      },
      "Category": {
        "$ref": "#/components/schemas/category"
      },
      "CategoryResponse": {
        "$ref": "#/components/schemas/categoryResponse"
      },
      "UserResponse": {
        "type": "object",
        "title": "User Response",
        "description": "Response schema after successful registration/login",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "required": [
              "user",
              "accessToken"
            ],
            "properties": {
              "user": {
                "type": "object",
                "required": [
                  "_id",
                  "name",
                  "email",
                  "favoriteRecipes"
                ],
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "User's unique identifier",
                    "example": "688319f519bc98717111a6b5"
                  },
                  "name": {
                    "type": "string",
                    "description": "User's full name",
                    "example": "John Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address",
                    "example": "john@example.com"
                  },
                  "avatar": {
                    "type": "string",
                    "format": "uri",
                    "description": "User's avatar URL",
                    "example": "https://example.com/avatar.jpg"
                  },
                  "favoriteRecipes": {
                    "type": "array",
                    "description": "List of user's favorite recipe IDs",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "followers": {
                    "type": "array",
                    "description": "List of user's followers",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "following": {
                    "type": "array",
                    "description": "List of users being followed",
                    "items": {
                      "type": "string"
                    },
                    "example": []
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Account creation timestamp",
                    "example": "2024-01-15T10:30:00Z"
                  },
                  "updatedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update timestamp",
                    "example": "2024-01-15T10:30:00Z"
                  }
                }
              },
              "accessToken": {
                "type": "string",
                "description": "JWT access token",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              }
            }
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "title": "User Login",
        "description": "Schema for user login",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "User's password",
            "example": "SecureP@ssw0rd!"
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "ingredients",
          "instructions",
          "description",
          "thumb",
          "time",
          "area"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Recipe's id",
            "example": "6462a8f74c3d0ddd28897fcd"
          },
          "title": {
            "type": "string",
            "description": "Title of the recipe",
            "example": "Battenberg Cake"
          },
          "category": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Identifier of the recipe category",
            "example": "6462a6cd4c3d0ddd28897f8f"
          },
          "area": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Identifier of the regional cuisine or country of origin of the recipe",
            "example": "6462a6f04c3d0ddd28897f9b"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200,
            "description": "Step-by-step instructions for preparing the recipe",
            "example": "Heat oven to 180C/160C fan/gas 4 and line the base ..."
          },
          "description": {
            "type": "string",
            "description": "Short description of the recipe",
            "example": "A classic British cake made with almond sponge cake ..."
          },
          "thumb": {
            "type": "string",
            "format": "binary",
            "description": "Dish's photo (max 2MB, only image files)"
          },
          "time": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "description": "Cooking time in minutes",
            "example": 60
          },
          "calories": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "description": "Calories per serving",
            "example": 230
          },
          "ingredients": {
            "type": "array",
            "description": "List of ingredients with measurements",
            "items": {
              "type": "object",
              "required": [
                "id",
                "measure"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$",
                  "description": "Ingredient ID",
                  "example": "640c2dd963a319ea671e367e"
                },
                "measure": {
                  "type": "string",
                  "description": "Amount of the ingredient for this recipe",
                  "example": "175g"
                }
              }
            }
          },
          "owner": {
            "type": "string",
            "description": "Id of the user who created the recipe",
            "example": "64c8d958249fae54bae90bb9"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the recipe was created",
            "example": "2023-03-11T10:25:33Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the recipe was last updated",
            "example": "2024-03-03T12:34:31Z"
          }
        }
      },
      "Recipe-2": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "category",
          "ingredients",
          "instructions",
          "description",
          "thumb",
          "time",
          "area"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "description": "Recipe's id",
            "example": "6462a8f74c3d0ddd28897fcd"
          },
          "title": {
            "type": "string",
            "description": "Title of the recipe",
            "example": "Battenberg Cake"
          },
          "category": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Identifier of the recipe category",
            "example": "6462a6cd4c3d0ddd28897f8f"
          },
          "area": {
            "type": "string",
            "pattern": "^[0-9a-fA-F]{24}$",
            "description": "Identifier of the regional cuisine or country of origin of the recipe",
            "example": "6462a6f04c3d0ddd28897f9b"
          },
          "instructions": {
            "type": "string",
            "maxLength": 1200,
            "description": "Step-by-step instructions for preparing the recipe",
            "example": "Heat oven to 180C/160C fan/gas 4 and line the base ..."
          },
          "description": {
            "type": "string",
            "description": "Short description of the recipe",
            "example": "A classic British cake made with almond sponge cake ..."
          },
          "thumb": {
            "type": "string",
            "format": "binary",
            "description": "Dish's photo (max 2MB, only image files)"
          },
          "time": {
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "description": "Cooking time in minutes",
            "example": 60
          },
          "calories": {
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "description": "Calories per serving",
            "example": 230
          },
          "ingredients": {
            "type": "array",
            "description": "List of ingredients with measurements",
            "items": {
              "type": "object",
              "required": [
                "id",
                "measure"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^[0-9a-fA-F]{24}$",
                  "description": "Ingredient ID",
                  "example": "640c2dd963a319ea671e367e"
                },
                "measure": {
                  "type": "string",
                  "description": "Amount of the ingredient for this recipe",
                  "example": "175g"
                }
              }
            }
          },
          "owner": {
            "type": "string",
            "description": "Id of the user who created the recipe",
            "example": "64c8d958249fae54bae90bb9"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the recipe was created",
            "example": "2023-03-11T10:25:33Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date when the recipe was last updated",
            "example": "2024-03-03T12:34:31Z"
          }
        }
      },
      "OwnRecipesResponse": {
        "type": "object",
        "title": "Own Recipes Response",
        "description": "Response containing user's own recipes with pagination",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully fetched your recipes"
          },
          "data": {
            "type": "object",
            "required": [
              "data",
              "page",
              "perPage",
              "totalItems",
              "totalPages",
              "hasNextPage",
              "hasPreviousPage"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/recipe"
                }
              },
              "page": {
                "type": "integer",
                "example": 1
              },
              "perPage": {
                "type": "integer",
                "example": 12
              },
              "totalItems": {
                "type": "integer",
                "example": 35
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "hasNextPage": {
                "type": "boolean",
                "example": true
              },
              "hasPreviousPage": {
                "type": "boolean",
                "example": false
              }
            }
          }
        }
      },
      "Ingredient-2": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          },
          "desc": {
            "type": "string",
            "example": "A type of cephalopod with a soft, cylindrical body and long tentacles..."
          },
          "img": {
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e37aa.png"
          }
        }
      },
      "ingredientsResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found ingredients!"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ingredient-2"
            }
          }
        }
      },
      "Category-2": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          }
        }
      },
      "categoryResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully found category!"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category-2"
            }
          }
        }
      },
      "ingredient": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          },
          "desc": {
            "type": "string",
            "example": "A type of cephalopod with a soft, cylindrical body and long tentacles..."
          },
          "img": {
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e37aa.png"
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request — the server could not process the request due to a client error.  Possible reasons include:\n  - \"Empty data\"\n  - \"Validation failed\" — one or more fields are invalid or missing. \n  - \"Malformed request\" — the request format is incorrect.\n  - \"Invalid ID format\" — must be a valid ObjectId.\n\nNot all of these errors apply to every endpoint. The actual reason depends on the specific request. For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Malformed request body"
                    },
                    "errors": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "validationFailedRecipes": {
                "summary": "All possible validation errors recipes",
                "description": "This example shows all possible validation errors for the recipes request. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "title is required. - title must not exceed 64 characters.",
                      "description is required. - description must not exceed 200 characters.",
                      "time is required. - time must be a number. - time must be greater than or equal to 1. - time must not exceed 360.",
                      "calories must be a number. - calories must be greater than or equal to 1. - calories must not exceed 10000.",
                      "category is required. - category must be a valid MongoDB ObjectId. - category must exist in the categories collection (valid category from API).",
                      "ingredients is required. - ingredients must be an array with 2-15 items. - each item must be an object with id, measure - id valid MongoDB ObjectId (valid ingredient from API), required - measure string, at least 1 character, required",
                      "instructions is required. - instructions must not exceed 1200 characters.",
                      "thumb must be an image file. - thumb must not exceed 2 MB."
                    ]
                  }
                }
              },
              "validationAuthOperations": {
                "summary": "All possible validation errors for auth",
                "description": "This example shows all possible validation errors for the user. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "Name should be required",
                      "Name should be a string",
                      "Name should have at least 3 characters",
                      "Name should have at most 16 characters",
                      "Email should be required",
                      "Email must be a valid email address",
                      "Password should be required",
                      "Password must contain at least one uppercase letter",
                      "Password must contain at least one lowercase letter",
                      "Password must contain at least one special character",
                      "Password must contain at least one number",
                      "Password must not contain spaces",
                      "Password should have at least 8 characters",
                      "Token is required"
                    ]
                  }
                }
              },
              "malformedRequest": {
                "summary": "Malformed from data",
                "description": "The submitted form data is malformed or corrupted. This can happen if the multipart/form-data is improperly encoded, or if files or fields are damaged during submission. Please check the form structure and file integrity before retrying.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Malformed request body",
                    "errors": [
                      "Expected double-quoted property name in JSON at position 22 (line 3 column 1)"
                    ]
                  }
                }
              },
              "validationParamsId": {
                "summary": "Validation error for id",
                "description": "This example shows validation error for the id.\n",
                "value": {
                  "status": 400,
                  "message": "Invalid id"
                }
              },
              "missingRecipeId": {
                "summary": "Missing recipe ID for favorite deletion",
                "description": "The recipe ID parameter is missing from the request URL. To delete a recipe from favorites, you must provide a valid recipe ID  in the URL path (e.g., DELETE /api/recipes/favorite/{recipeId}).\n",
                "value": {
                  "status": 400,
                  "message": "Missing recipeId"
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized — request lacks valid authentication\n The specific cause of the 401 error may vary depending on the endpoint.\n Possible reasons include:\n  - Missing or malformed Authorization header\n  - Expired or invalid access token\n  - Session not found\n  - Session expired\n  - Token expired\n  - Token invalid\n  - User not found\nFor more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Unauthorized"
                }
              }
            },
            "examples": {
              "missingHeader": {
                "summary": "Missing Authorization header",
                "value": {
                  "status": 401,
                  "message": "Please provide Authorization header"
                }
              },
              "malformedToken": {
                "summary": "Malformed Authorization header",
                "value": {
                  "status": 401,
                  "message": "Authorization header should be of type Bearer"
                }
              },
              "sessionNotFound": {
                "summary": "Session not found",
                "value": {
                  "status": 401,
                  "message": "Session not found"
                }
              },
              "sessionExpired": {
                "summary": "Session expired",
                "value": {
                  "status": 401,
                  "message": "Session expired"
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 401,
                  "message": "User not found"
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found — the requested resource could not be found. Possible reasons include:\n - \"Resource not found\" — the requested item does not exist.\n - \"User not found\" — no user was found for the given email or token.\n - \"Recipe not found\" — no Recipe was found for the given recipeId.\n - \"Recipe not found in user favorites\" — the specified recipe was not found in the user's favorite recipes list.\n\n Not all of these cases apply to every endpoint.\n For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Not found"
                }
              }
            },
            "examples": {
              "resourceNotFound": {
                "summary": "Generic not found",
                "value": {
                  "status": 404,
                  "message": "Resource not found"
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 404,
                  "message": "User not found"
                }
              },
              "RecipeNotFound": {
                "summary": "Recipe not found",
                "value": {
                  "status": 404,
                  "message": "Recipe not found"
                }
              },
              "FavoriteRecipeNotFound": {
                "summary": "Recipe not found in user favorites",
                "value": {
                  "status": 404,
                  "message": "Recipe not found in user favorites"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error — request conflicts with existing resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email is already in use"
                    }
                  }
                }
              }
            },
            "examples": {
              "emailInUse": {
                "summary": "Email already exists",
                "value": {
                  "status": 409,
                  "message": "Conflict error",
                  "data": {
                    "message": "Email is already in use"
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error:\n  - \"Unhandled exception\" — a generic server error.\n  - \"Database failure\" — internal service or DB error.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "error"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Something went wrong"
                },
                "error": {
                  "type": "string",
                  "example": "Internal server error"
                }
              }
            },
            "examples": {
              "genericError": {
                "summary": "Unhandled exception",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Internal server error"
                }
              },
              "dbFailure": {
                "summary": "Database error",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Failed to connect to the database"
                }
              }
            }
          }
        }
      }
    }
  }
}