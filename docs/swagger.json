{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API for managing user recipes"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://tasteorama-backend-dcjy.onrender.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Tasteorama",
      "description": "A RESTful API for managing a user's recipe list, including creation, adding to favorites, and deletion of recipes. The API also supports filtering by categories and ingredients."
    }
  ],
  "paths": {
    "/api/recipes": {
      "post": {
        "tags": [
          "Add Recipe"
        ],
        "summary": "Create new recipe",
        "operationId": "createOwnRecipe",
        "description": "Create a new owners recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "area",
                  "title",
                  "description",
                  "time",
                  "category",
                  "ingredients",
                  "instructions"
                ],
                "properties": {
                  "area": {
                    "description": "Which country's dish",
                    "type": "string",
                    "example": "6462a6f04c3d0ddd28897f9b"
                  },
                  "title": {
                    "description": "The name of the dish",
                    "type": "string",
                    "example": "Lasagne"
                  },
                  "description": {
                    "description": "Description dish",
                    "type": "string",
                    "example": "Layers of pasta, meat sauce, and cheese"
                  },
                  "time": {
                    "description": "Cooking time in minutes",
                    "type": "number",
                    "example": 10
                  },
                  "calories": {
                    "description": "Calories",
                    "type": "number",
                    "example": 230
                  },
                  "category": {
                    "description": "Category dish",
                    "type": "string",
                    "example": "6462a6cd4c3d0ddd28897f94"
                  },
                  "ingredients": {
                    "description": "Ingredients dish (JSON string array of objects)",
                    "type": "string",
                    "example": "[{\"id\":\"64d9f0d2e9f1b8a3d6e12345\",\"measure\":\"200 g\"}]"
                  },
                  "instructions": {
                    "description": "Instructions on how to prepare a dish",
                    "type": "string",
                    "example": "Heat the oil in a large saucepan"
                  },
                  "thumb": {
                    "description": "Dish's photo (max 2MB, only image)",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a recipe",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created new recire!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "security": [],
        "requestBody": {
          "description": "User registration payload",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              },
              "example": {
                "name": "John Doe",
                "email": "john@example.com",
                "password": "P@ssw0rd!"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log in a user",
        "operationId": "loginUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              },
              "example": {
                "email": "john@example.com",
                "password": "securePassword123"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Login"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Log out the current user",
        "operationId": "logoutUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "operationId": "refreshUser",
        "parameters": [
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed session",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request reset password email",
        "operationId": "requestResetEmail",
        "requestBody": {
          "description": "User request reset email",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "example": "user@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reset password email sent",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email has been successfully sent."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "yeJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODg4ZDgwYzg2ZjZkNTExNDBlZDJlNTIiLCJlbWFpbCI6ImJtdmUyMUB1a3IubmV0IiwiaWF0IjoxNzUzODY1NzIwLCJleHAiOjE3NTM4NjYwMjB9.Xp60X675SgqtwhR9_QSQwNmNXdnathXTAXH0mlP5xpg5"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewPassw0rd!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset user password",
        "operationId": "resetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "password"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "example": "yeJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODg4ZDgwYzg2ZjZkNTExNDBlZDJlNTIiLCJlbWFpbCI6ImJtdmUyMUB1a3IubmV0IiwiaWF0IjoxNzUzODY1NzIwLCJleHAiOjE3NTM4NjYwMjB9.Xp60X675SgqtwhR9_QSQwNmNXdnathXTAXH0mlP5xpg5"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "example": "NewPassw0rd!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password has been successfully reset."
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "400": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 400
          },
          "message": {
            "type": "string",
            "example": "Bad request"
          },
          "data": {
            "type": "object",
            "required": [
              "message",
              "errors"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Validation failed"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "401": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Unauthorized"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string",
                "example": "Session expired"
              }
            }
          }
        }
      },
      "404": {
        "type": "object",
        "required": [
          "status",
          "message"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 404
          },
          "message": {
            "type": "string",
            "example": "Not found"
          }
        }
      },
      "500": {
        "type": "object",
        "required": [
          "status",
          "message",
          "error"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Something went wrong"
          },
          "error": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "_id",
          "area",
          "title",
          "description",
          "time",
          "category",
          "ingredients",
          "instructions",
          "userId",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Recipe's id",
            "type": "string",
            "example": "6462a8f74c3d0ddd28898029"
          },
          "area": {
            "description": "Which country's dish",
            "type": "string",
            "example": "6462a6f04c3d0ddd28897f9b"
          },
          "title": {
            "description": "The name of the dish",
            "type": "string",
            "example": "Lasagne"
          },
          "description": {
            "description": "Description dish",
            "type": "string",
            "example": "Layers of pasta, meat sauce, and cheese"
          },
          "time": {
            "description": "Cooking time in minutes",
            "type": "number",
            "example": 10
          },
          "category": {
            "description": "Category dish",
            "type": "string",
            "example": "6462a6cd4c3d0ddd28897f94"
          },
          "ingredients": {
            "description": "Ingredients dish (JSON string array of objects)",
            "type": "string",
            "example": "[{\"id\":\"64d9f0d2e9f1b8a3d6e12345\",\"measure\":\"200 g\"}]"
          },
          "instructions": {
            "description": "Instructions on how to prepare a dish",
            "type": "string",
            "example": "Heat the oil in a large saucepan"
          },
          "userId": {
            "description": "Recipe's owner id",
            "type": "string",
            "example": "99e4decdd286b30065d54af1"
          },
          "thumb": {
            "description": "Dish's photo (URL to uploaded image)",
            "type": "string",
            "example": "https://ftp.goit.study/img/so-yummy/preview/Lasagne.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-26T15:45:37.660+00:00"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-26T15:45:37.660+00:00"
          }
        }
      },
      "User": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User's name must not exceed 128 characters.",
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "description": "User's email must be a valid email address and must not exceed 128 characters.",
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "description": "User's password must contain at least: - one uppercase letter - one lowercase letter - one digit - one special character - minimum length of 8 characters - maximum length of 128 characters\n",
            "type": "string",
            "format": "password",
            "example": "P@ssw0rd!"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "description": "status code",
            "example": 201
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "required": [
              "_id",
              "name",
              "email",
              "createdAt",
              "updatedAt"
            ],
            "properties": {
              "name": {
                "description": "User's name",
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "description": "User's email",
                "type": "string",
                "example": "john@example.com"
              },
              "_id": {
                "description": "User's id",
                "type": "string",
                "example": "688319f519bc98717111a6b5"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-07-30T18:35:01.046Z"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time",
                "example": "2025-08-04T16:06:04.521Z"
              }
            }
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "User's email",
            "type": "string",
            "format": "email",
            "example": "john@example.com"
          },
          "password": {
            "description": "User's password",
            "format": "password",
            "example": "P@ssw0rd!"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Successfully logged in an user!"
          },
          "data": {
            "type": "object",
            "required": [
              "accessToken"
            ],
            "properties": {
              "accessToken": {
                "type": "string",
                "example": "myQ57pVSqU92uN0LZK3rTJRgeqIorXYcbTIlqAyT"
              }
            }
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad Request — the server could not process the request due to a client error.  Possible reasons include:\n  - \"Empty contact data\"\n  - \"Validation failed\" — one or more fields are invalid or missing. \n  - \"Malformed request\" — the request format is incorrect.\n\nNot all of these errors apply to every endpoint. The actual reason depends on the specific request. For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/400"
            },
            "examples": {
              "emptyContact": {
                "summary": "Empty data",
                "description": "The submitted form data is empty or contains no fields. Please provide at least one valid field or file in the form before submitting the request.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Please provide data details before submitting",
                    "errors": [
                      "No fields were provided"
                    ]
                  }
                }
              },
              "validationFailedRecipes": {
                "summary": "All possible validation errors recipes",
                "description": "This example shows all possible validation errors for the recipes request. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "recipes name is required"
                    ]
                  }
                }
              },
              "validationUserContact": {
                "summary": "All possible validation errors user",
                "description": "This example shows all possible validation errors for the user. Actual errors depend on which fields are missing or invalid.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Validation failed",
                    "errors": [
                      "Name should be required",
                      "Name should be a string",
                      "Name should have at least 3 characters",
                      "Name should have at most 18 characters",
                      "Phone number cannot be empty",
                      "Phone number should be a string",
                      "Phone number must be valid for Ukraine",
                      "Email should be required",
                      "Email must be a valid email address",
                      "Password should be required",
                      "Password must contain at least one uppercase letter",
                      "Password must contain at least one lowercase letter",
                      "Password must contain at least one special character",
                      "Password must contain at least one number",
                      "Password must not contain spaces",
                      "Password should have at least 8 characters",
                      "Token is required"
                    ]
                  }
                }
              },
              "malformedRequest": {
                "summary": "Malformed from data",
                "description": "The submitted form data is malformed or corrupted. This can happen if the multipart/form-data is improperly encoded, or if files or fields are damaged during submission. Please check the form structure and file integrity before retrying.\n",
                "value": {
                  "status": 400,
                  "message": "Bad request",
                  "data": {
                    "message": "Malformed request body",
                    "errors": [
                      "Expected double-quoted property name in JSON at position 22 (line 3 column 1)"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized — request lacks valid authentication\n The specific cause of the 401 error may vary depending on the endpoint. \n Possible reasons include:\n  - Missing or malformed Authorization header\n  - Expired or invalid access token\n  - Session not found \n  - Session expired \n  - Token expired\n  - Token invalid\n  - User not found\n\nFor more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/401"
            },
            "examples": {
              "missingHeader": {
                "summary": "Missing Authorization header",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "Please provide Authorization header"
                  }
                }
              },
              "malformedToken": {
                "summary": "Malformed Authorization header",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "Authorization header should be of type Bearer"
                  }
                }
              },
              "sessionNotFound": {
                "summary": "Session not found",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "Session not found"
                  }
                }
              },
              "sessionExpired": {
                "summary": "Session expired",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "Session expired"
                  }
                }
              },
              "tokenExpired": {
                "summary": "jwt expired",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "jwt expired"
                  }
                }
              },
              "tokenInvalid": {
                "summary": "jwt invalid",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "invalid signature"
                  }
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 401,
                  "message": "Unauthorized",
                  "data": {
                    "message": "User not found"
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found — the requested resource could not be found. Possible reasons include:\n - \"Resource not found\" — the requested item does not exist.\n - \"User not found\" — no user was found for the given email or token.\n - \"Contact not found\" — no contact was found for the given contactId.\n\n Not all of these cases apply to every endpoint.\n For more information see examples\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/404"
            },
            "examples": {
              "resourceNotFound": {
                "summary": "Generic not found",
                "value": {
                  "status": 404,
                  "message": "Resource not found"
                }
              },
              "userNotFound": {
                "summary": "User not found",
                "value": {
                  "status": 404,
                  "message": "User not found"
                }
              },
              "ContactNotFound": {
                "summary": "Contact not found",
                "value": {
                  "status": 404,
                  "message": "Contact not found"
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict error — request conflicts with existing resource",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email is already in use"
                    }
                  }
                }
              }
            },
            "examples": {
              "emailInUse": {
                "summary": "Email already exists",
                "value": {
                  "status": 409,
                  "message": "Conflict error",
                  "data": {
                    "message": "Email is already in use"
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error:\n  - \"Unhandled exception\" — a generic server error.\n  - \"Database failure\" — internal service or DB error.\n",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/500"
            },
            "examples": {
              "genericError": {
                "summary": "Unhandled exception",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Internal server error"
                }
              },
              "dbFailure": {
                "summary": "Database error",
                "value": {
                  "status": 500,
                  "message": "Something went wrong",
                  "error": "Failed to connect to the database"
                }
              }
            }
          }
        }
      },
      "Login": {
        "description": "Successfully logged in an user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LoginResponse"
            }
          }
        }
      }
    }
  }
}